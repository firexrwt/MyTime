package com.firexrwtinc.mytime.notifications

import android.app.AlarmManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.util.Log
import com.firexrwtinc.mytime.data.model.Task
import java.time.Instant
import java.time.LocalDateTime
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

class AlarmManagerHelper(private val context: Context) {
    
    private val alarmManager = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
    
    fun scheduleTaskReminder(task: Task, reminderMinutes: Int? = null) {
        val taskDateTime = LocalDateTime.of(task.date, task.startTime)
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –î–û –∑–∞–¥–∞—á–∏
        val minutes = reminderMinutes ?: (task.reminderHoursBefore?.times(60)) ?: 30
        val reminderDateTime = taskDateTime.minusMinutes(minutes.toLong())
        
        Log.e("AlarmManager", "–ü–õ–ê–ù–ò–†–£–ï–ú –ê–õ–ê–†–ú–´ –î–õ–Ø –ó–ê–î–ê–ß–ò: ${task.title}")
        Log.e("AlarmManager", "–í—Ä–µ–º—è –∑–∞–¥–∞—á–∏: $taskDateTime, –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $reminderDateTime")
        
        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if (!reminderDateTime.isBefore(LocalDateTime.now())) {
            scheduleAlarm(task, reminderDateTime, "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        }
        
        // –ü–õ–ê–ù–ò–†–£–ï–ú –ë–£–î–ò–õ–¨–ù–ò–ö –¢–û–ß–ù–û –ù–ê –í–†–ï–ú–Ø –ù–ê–ß–ê–õ–ê –ó–ê–î–ê–ß–ò
        if (!taskDateTime.isBefore(LocalDateTime.now())) {
            scheduleAlarm(task, taskDateTime, "–Ω–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏", isTaskStart = true)
        } else {
            Log.d("AlarmManager", "Task start time is in the past, skipping task start alarm")
        }
    }
    
    private fun scheduleAlarm(task: Task, triggerDateTime: LocalDateTime, description: String, isTaskStart: Boolean = false) {
        val now = LocalDateTime.now()
        
        // –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï: –≤—Å–µ–≥–¥–∞ —Å—Ç–∞–≤–∏–º –∞–ª–∞—Ä–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        val testDateTime = now.plusSeconds(10)
        
        Log.e("AlarmManager", "–ü–õ–ê–ù–ò–†–£–ï–ú $description –¥–ª—è –∑–∞–¥–∞—á–∏: ${task.title}")
        Log.e("AlarmManager", "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: $triggerDateTime")
        Log.e("AlarmManager", "–¢–ï–°–¢–û–í–û–ï –í–†–ï–ú–Ø: $testDateTime")
        
        val intent = Intent(context, AlarmReceiver::class.java).apply {
            putExtra("TASK_ID", task.id)
            putExtra("TASK_TITLE", if (isTaskStart) "üö® ${task.title} - –í–†–ï–ú–Ø –ù–ê–ß–ò–ù–ê–¢–¨!" else "üì¢ ${task.title}")
            putExtra("TASK_TIME", task.startTime.format(DateTimeFormatter.ofPattern("HH:mm")))
            putExtra("TASK_LOCATION", task.location)
            putExtra("IS_TASK_START", isTaskStart)
            action = "com.firexrwtinc.mytime.ALARM_ACTION"
        }
        
        val requestCode = if (isTaskStart) (task.id + 20000).toInt() else task.id.toInt()
        val pendingIntent = PendingIntent.getBroadcast(
            context,
            requestCode,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        val zonedDateTime = testDateTime.atZone(ZoneId.systemDefault())
        val triggerTime = zonedDateTime.toInstant().toEpochMilli()
        
        Log.e("AlarmManager", "–ê–ª–∞—Ä–º –±—É–¥–µ—Ç –≤: $testDateTime (—á–µ—Ä–µ–∑ ${java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(triggerTime - System.currentTimeMillis())} —Å–µ–∫—É–Ω–¥)")
        
        try {
            alarmManager.setExactAndAllowWhileIdle(
                AlarmManager.RTC_WAKEUP,
                triggerTime,
                pendingIntent
            )
            Log.e("AlarmManager", "‚úÖ EXACT –ê–õ–ê–†–ú –£–°–¢–ê–ù–û–í–õ–ï–ù –¥–ª—è –∑–∞–¥–∞—á–∏: ${task.title} ($description)")
        } catch (e: SecurityException) {
            Log.e("AlarmManager", "‚ùå –ù–ï–¢ –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–ê EXACT –ê–õ–ê–†–ú", e)
            try {
                alarmManager.set(
                    AlarmManager.RTC_WAKEUP,
                    triggerTime,
                    pendingIntent
                )
                Log.e("AlarmManager", "‚úÖ –û–ë–´–ß–ù–´–ô –ê–õ–ê–†–ú –£–°–¢–ê–ù–û–í–õ–ï–ù –¥–ª—è –∑–∞–¥–∞—á–∏: ${task.title} ($description)")
            } catch (e2: Exception) {
                Log.e("AlarmManager", "‚ùå‚ùå –í–°–ï –ê–õ–ê–†–ú–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨", e2)
            }
        }
    }
    
    fun cancelTaskReminder(taskId: Long) {
        // –û—Ç–º–µ–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        val reminderIntent = Intent(context, AlarmReceiver::class.java)
        val reminderPendingIntent = PendingIntent.getBroadcast(
            context,
            taskId.toInt(),
            reminderIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        alarmManager.cancel(reminderPendingIntent)
        
        // –û—Ç–º–µ–Ω—è–µ–º –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏
        val startIntent = Intent(context, AlarmReceiver::class.java)
        val startPendingIntent = PendingIntent.getBroadcast(
            context,
            (taskId + 20000).toInt(),
            startIntent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        alarmManager.cancel(startPendingIntent)
        
        Log.d("AlarmManager", "All alarms cancelled for task ID: $taskId")
    }
}