package com.firexrwtinc.mytime.notifications

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Build
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.firexrwtinc.mytime.MainActivity
import com.firexrwtinc.mytime.R

class NotificationHelper(private val context: Context) {
    
    companion object {
        const val CHANNEL_ID = "task_reminders"
        const val CHANNEL_NAME = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö"
        const val CHANNEL_DESCRIPTION = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á–∞—Ö"
    }
    
    init {
        createNotificationChannel()
    }
    
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = CHANNEL_DESCRIPTION
                enableVibration(true)
                enableLights(true)
                setBypassDnd(true) // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º "–ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"
                setShowBadge(true)
                lockscreenVisibility = android.app.Notification.VISIBILITY_PUBLIC
            }
            
            val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
    
    fun showTaskReminder(taskId: Long, taskTitle: String, taskTime: String, location: String? = null) {
        android.util.Log.e("NotificationHelper", "–°–û–ó–î–ê–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–ï: $taskTitle (ID: $taskId)")
        
        val intent = Intent(context, MainActivity::class.java).apply {
            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
            putExtra("TASK_ID", taskId)
        }
        
        val pendingIntent = PendingIntent.getActivity(
            context, 
            taskId.toInt(), 
            intent, 
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        val isTaskStart = taskTitle.contains("–ù–ê–ß–ê–õ–ê–°–¨!")
        val notificationTitle = if (isTaskStart) "üîî –ó–ê–î–ê–ß–ê –ù–ê–ß–ê–õ–ê–°–¨!" else "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ"
        val priority = if (isTaskStart) NotificationCompat.PRIORITY_MAX else NotificationCompat.PRIORITY_HIGH
        
        val notificationBuilder = NotificationCompat.Builder(context, CHANNEL_ID)
            .setSmallIcon(if (isTaskStart) android.R.drawable.ic_lock_idle_alarm else android.R.drawable.ic_dialog_info)
            .setContentTitle(notificationTitle)
            .setContentText("$taskTitle –≤ $taskTime")
            .setPriority(priority)
            .setDefaults(NotificationCompat.DEFAULT_ALL) // –ó–≤—É–∫, –≤–∏–±—Ä–∞—Ü–∏—è, –º–∏–≥–∞–Ω–∏–µ
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)
            .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
            .setCategory(if (isTaskStart) NotificationCompat.CATEGORY_ALARM else NotificationCompat.CATEGORY_REMINDER)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if (!location.isNullOrBlank()) {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ "55.7558, 37.6176"
            val coords = location.split(",").map { it.trim() }
            val navigationIntent = if (coords.size == 2) {
                try {
                    val lat = coords[0].toDouble()
                    val lng = coords[1].toDouble()
                    Intent(Intent.ACTION_VIEW).apply {
                        data = Uri.parse("geo:$lat,$lng")
                    }
                } catch (e: NumberFormatException) {
                    // –ï—Å–ª–∏ –Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
                    Intent(Intent.ACTION_VIEW).apply {
                        data = Uri.parse("geo:0,0?q=${Uri.encode(location)}")
                    }
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
                Intent(Intent.ACTION_VIEW).apply {
                    data = Uri.parse("geo:0,0?q=${Uri.encode(location)}")
                }
            }
            
            val navigationPendingIntent = PendingIntent.getActivity(
                context,
                (taskId + 1000).toInt(), // –î—Ä—É–≥–æ–π request code
                navigationIntent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            
            notificationBuilder.addAction(
                android.R.drawable.ic_menu_mylocation, // –ò–∫–æ–Ω–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
                "üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è",
                navigationPendingIntent
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            notificationBuilder.setContentText("$taskTitle –≤ $taskTime ‚Ä¢ $location")
        }
        
        val notification = notificationBuilder.build()
        
        try {
            val notificationManager = NotificationManagerCompat.from(context)
            if (notificationManager.areNotificationsEnabled()) {
                notificationManager.notify(taskId.toInt(), notification)
                android.util.Log.e("NotificationHelper", "‚úÖ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –ü–û–ö–ê–ó–ê–ù–û –£–°–ü–ï–®–ù–û: $taskTitle")
            } else {
                android.util.Log.e("NotificationHelper", "‚ùå –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û–¢–ö–õ–Æ–ß–ï–ù–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
            }
        } catch (e: SecurityException) {
            android.util.Log.e("NotificationHelper", "‚ùå –ù–ï–¢ –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ù–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø", e)
        } catch (e: Exception) {
            android.util.Log.e("NotificationHelper", "‚ùå –û–®–ò–ë–ö–ê –ü–û–ö–ê–ó–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø", e)
        }
    }
}